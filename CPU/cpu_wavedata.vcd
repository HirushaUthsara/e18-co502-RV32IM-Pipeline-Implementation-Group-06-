$date
	Sun Jun 11 11:59:31 2023
$end
$version
	Icarus Verilog
$end
$timescale
	100ps
$end
$scope module cpu_tb $end
$var reg 1 ! CLK $end
$var reg 1 " RESET $end
$scope module cpu $end
$var wire 5 # ALUOP [4:0] $end
$var wire 5 $ ALUOP_OUT [4:0] $end
$var wire 1 % BRANCH $end
$var wire 32 & BRANCH_OR_JUMP_ADDR [31:0] $end
$var wire 1 ' BRANCH_OUT $end
$var wire 1 ( BUSYWAIT $end
$var wire 32 ) CACHE_READ_OUT [31:0] $end
$var wire 32 * CACHE_READ_OUT_MEM_WB [31:0] $end
$var wire 1 + CLK $end
$var wire 32 , DATA1 [31:0] $end
$var wire 32 - DATA2 [31:0] $end
$var wire 32 . DATA_CORRECTING_OUT [31:0] $end
$var wire 128 / DATA_MEM_READ_OUT [127:0] $end
$var wire 128 0 DATA_MEM_WRITE_OUT [127:0] $end
$var wire 1 1 D_BUSYWAIT $end
$var wire 1 2 EQ_FLAG $end
$var wire 3 3 FUNCT3_OUT [2:0] $end
$var wire 3 4 FUNCT3_OUT_EX_MEM [2:0] $end
$var wire 32 5 INSTRUCTION [31:0] $end
$var wire 32 6 IN_REG [31:0] $end
$var wire 1 7 I_BUSYWAIT $end
$var wire 1 8 I_MEM_BUSYWAIT $end
$var wire 1 9 I_MEM_READ $end
$var wire 1 : JUMP $end
$var wire 1 ; JUMP_OUT $end
$var wire 1 < LTU_FLAG $end
$var wire 1 = LT_FLAG $end
$var wire 28 > MEM_ADDRESS_TO_CACHE [27:0] $end
$var wire 28 ? MEM_BLOCK_ADDR [27:0] $end
$var wire 1 @ MEM_BUSYWAIT $end
$var wire 1 A MEM_MEM_READ $end
$var wire 1 B MEM_MEM_WRITE $end
$var wire 1 C MEM_READ $end
$var wire 128 D MEM_READINST [127:0] $end
$var wire 1 E MEM_READ_OUT $end
$var wire 1 F MEM_READ_OUT_EX_MEM $end
$var wire 5 G MEM_WB_INADDRESS [4:0] $end
$var wire 1 H MEM_WRITE $end
$var wire 1 I MEM_WRITE_OUT $end
$var wire 1 J MEM_WRITE_OUT_EX_MEM $end
$var wire 1 K MUXDATAMEM_SELECT $end
$var wire 1 L MUXDATAMEM_SELECT_OUT $end
$var wire 1 M MUXDATAMEM_SELECT_OUT_EX_MEM $end
$var wire 1 N MUXDATAMEM_SELECT_OUT_MEM_WB $end
$var wire 3 O MUXIMMTYPE_SELECT [2:0] $end
$var wire 1 P MUXIMM_SELECT $end
$var wire 1 Q MUXIMM_SELECT_OUT $end
$var wire 32 R MUXJAL_OUT [31:0] $end
$var wire 32 S MUXJAL_OUT_EX_MEM [31:0] $end
$var wire 32 T MUXJAL_OUT_MEM_WB [31:0] $end
$var wire 1 U MUXJAL_SELECT $end
$var wire 1 V MUXJAL_SELECT_OUT $end
$var wire 1 W MUXPC_SELECT $end
$var wire 1 X MUXPC_SELECT_OUT $end
$var wire 32 Y OUT1_OUT [31:0] $end
$var wire 32 Z OUT1_REG [31:0] $end
$var wire 32 [ OUT2_OUT [31:0] $end
$var wire 32 \ OUT2_OUT_EX_MEM [31:0] $end
$var wire 32 ] OUT2_REG [31:0] $end
$var wire 32 ^ PC [31:0] $end
$var wire 32 _ PC_DIRECT_OUT_IN [31:0] $end
$var wire 32 ` PC_DIRECT_OUT_OUT [31:0] $end
$var wire 1 a PC_MUX_CONTROL $end
$var wire 32 b PC_MUX_OUT [31:0] $end
$var wire 32 c PC_PLUS_4 [31:0] $end
$var wire 32 d PC_PLUS_4_OUT_IN [31:0] $end
$var wire 32 e PC_PLUS_4_OUT_OUT [31:0] $end
$var wire 5 f RD_OUT [4:0] $end
$var wire 5 g RD_OUT_EX_MEM [4:0] $end
$var wire 32 h READINST [31:0] $end
$var wire 1 i REG_FLUSH $end
$var wire 1 j RESET $end
$var wire 32 k RESULT_ALU [31:0] $end
$var wire 32 l SIGN_ZERO_EXTEND [31:0] $end
$var wire 32 m SIGN_ZERO_EXTEND_OUT [31:0] $end
$var wire 32 n TO_DATA_MEM [31:0] $end
$var wire 1 o WRITE_ENABLE $end
$var wire 1 p WRITE_ENABLE_OUT $end
$var wire 1 q WRITE_ENABLE_OUT_EX_MEM $end
$var wire 1 r WRITE_REG $end
$scope module regfile $end
$var wire 1 + clk $end
$var wire 5 s read1 [4:0] $end
$var wire 5 t read2 [4:0] $end
$var wire 5 u reg_write [4:0] $end
$var wire 1 j rst $end
$var wire 32 v write_data [31:0] $end
$var wire 1 r writeenable $end
$var integer 32 w i [31:0] $end
$var reg 32 x read_data1 [31:0] $end
$var reg 32 y read_data2 [31:0] $end
$upscope $end
$scope module controlunit $end
$var wire 3 z FUNCTION3 [2:0] $end
$var wire 7 { FUNCTION7 [6:0] $end
$var wire 32 | INSTRUCTION [31:0] $end
$var wire 7 } OPCODE [6:0] $end
$var reg 5 ~ ALUOP [4:0] $end
$var reg 1 !" BRANCH $end
$var reg 3 "" IMME_SELECT [2:0] $end
$var reg 1 #" JUMP $end
$var reg 1 $" MEMREAD $end
$var reg 1 %" MEMWRITE $end
$var reg 1 &" MUX1_SELECT $end
$var reg 1 '" MUX2_SELECT $end
$var reg 1 (" MUX3_SELECT $end
$var reg 1 )" MUX4_SELECT $end
$var reg 1 *" WRITEENABLE $end
$upscope $end
$scope module signZeroExtend $end
$var wire 32 +" INSTRUCTION [31:0] $end
$var wire 3 ," SELECT [2:0] $end
$var reg 32 -" B_TYPE [31:0] $end
$var reg 32 ." I_TYPE [31:0] $end
$var reg 32 /" J_TYPE [31:0] $end
$var reg 32 0" OUT [31:0] $end
$var reg 32 1" S_TYPE [31:0] $end
$var reg 32 2" U_TYPE [31:0] $end
$upscope $end
$scope module reg2 $end
$var wire 5 3" ALUOP_IN [4:0] $end
$var wire 1 % BRANCH_IN $end
$var wire 1 ( BUSYWAIT $end
$var wire 1 + CLK $end
$var wire 3 4" FUNCT3_IN [2:0] $end
$var wire 1 : JUMP_IN $end
$var wire 1 C MEM_READ_IN $end
$var wire 1 H MEM_WRITE_IN $end
$var wire 1 K MUXDATAMEM_SELECT_IN $end
$var wire 1 P MUXIMM_SELECT_IN $end
$var wire 1 U MUXJAL_SELECT_IN $end
$var wire 1 W MUXPC_SELECT_IN $end
$var wire 32 5" OUT1_IN [31:0] $end
$var wire 32 6" OUT2_IN [31:0] $end
$var wire 32 7" PC_DIRECT_OUT_IN [31:0] $end
$var wire 32 8" PC_PLUS_4_OUT_IN [31:0] $end
$var wire 5 9" RD_IN [4:0] $end
$var wire 1 i RESET $end
$var wire 32 :" SIGN_ZERO_EXTEND [31:0] $end
$var wire 1 o WRITE_ENABLE_IN $end
$var reg 5 ;" ALUOP_OUT [4:0] $end
$var reg 1 <" BRANCH_OUT $end
$var reg 3 =" FUNCT3_OUT [2:0] $end
$var reg 1 >" JUMP_OUT $end
$var reg 1 ?" MEM_READ_OUT $end
$var reg 1 @" MEM_WRITE_OUT $end
$var reg 1 A" MUXDATAMEM_SELECT_OUT $end
$var reg 1 B" MUXIMM_SELECT_OUT $end
$var reg 1 C" MUXJAL_SELECT_OUT $end
$var reg 1 D" MUXPC_SELECT_OUT $end
$var reg 32 E" OUT1_OUT [31:0] $end
$var reg 32 F" OUT2_OUT [31:0] $end
$var reg 32 G" PC_DIRECT_OUT_OUT [31:0] $end
$var reg 32 H" PC_PLUS_4_OUT_OUT [31:0] $end
$var reg 5 I" RD_OUT [4:0] $end
$var reg 32 J" SIGN_ZERO_EXTEND_OUT [31:0] $end
$var reg 1 K" WRITE_ENABLE_OUT $end
$upscope $end
$scope module Mux1 $end
$var wire 32 L" INPUT1 [31:0] $end
$var wire 32 M" INPUT2 [31:0] $end
$var wire 32 N" OUT [31:0] $end
$var wire 1 X SELECT $end
$upscope $end
$scope module Mux2 $end
$var wire 32 O" INPUT1 [31:0] $end
$var wire 32 P" INPUT2 [31:0] $end
$var wire 32 Q" OUT [31:0] $end
$var wire 1 Q SELECT $end
$upscope $end
$scope module alu $end
$var wire 32 R" ADD_RES [31:0] $end
$var wire 32 S" AND_RES [31:0] $end
$var wire 32 T" DATA1 [31:0] $end
$var wire 32 U" DATA2 [31:0] $end
$var wire 32 V" DIVU_RES [31:0] $end
$var wire 32 W" DIV_RES [31:0] $end
$var wire 1 2 EQUAL $end
$var wire 32 X" FWD_RES [31:0] $end
$var wire 32 Y" MULHSU_RES [31:0] $end
$var wire 32 Z" MULHU_RES [31:0] $end
$var wire 32 [" MULH_RES [31:0] $end
$var wire 32 \" MUL_RES [31:0] $end
$var wire 32 ]" OR_RES [31:0] $end
$var wire 32 ^" REMU_RES [31:0] $end
$var wire 32 _" REM_RES [31:0] $end
$var wire 5 `" SELECT [4:0] $end
$var wire 1 = SIGNEDLT $end
$var wire 32 a" SLL_RES [31:0] $end
$var wire 32 b" SLTU_RES [31:0] $end
$var wire 32 c" SLT_RES [31:0] $end
$var wire 32 d" SRA_RES [31:0] $end
$var wire 32 e" SRL_RES [31:0] $end
$var wire 32 f" SUB_RES [31:0] $end
$var wire 1 < UNSIGNEDLT $end
$var wire 32 g" XOR_RES [31:0] $end
$var reg 32 h" RESULT [31:0] $end
$upscope $end
$scope module Mux3 $end
$var wire 32 i" INPUT1 [31:0] $end
$var wire 32 j" INPUT2 [31:0] $end
$var wire 32 k" OUT [31:0] $end
$var wire 1 V SELECT $end
$upscope $end
$scope module branchjump $end
$var wire 32 l" ALU_JUMP_IMM [31:0] $end
$var wire 1 m" BEQ $end
$var wire 1 n" BGE $end
$var wire 1 o" BGEU $end
$var wire 1 p" BLT $end
$var wire 1 q" BLTU $end
$var wire 1 r" BNE $end
$var wire 1 ' BRANCH $end
$var wire 32 s" BRANCH_ADDR [31:0] $end
$var wire 1 2 EQUAL $end
$var wire 3 t" FUNCTION3 [2:0] $end
$var wire 1 ; JUMP $end
$var wire 1 j RESET $end
$var wire 1 = SIGNED_LT $end
$var wire 1 < UNSIGNED_LT $end
$var reg 32 u" BRANCH_JUMP_OUT [31:0] $end
$var reg 1 v" PCMUX $end
$var reg 1 w" REG_FLUSH $end
$upscope $end
$scope module reg3 $end
$var wire 32 x" ALU_OUT_IN [31:0] $end
$var wire 1 ( BUSYWAIT $end
$var wire 1 + CLK $end
$var wire 3 y" FUNCT3_IN [2:0] $end
$var wire 1 E MEM_READ_IN $end
$var wire 1 I MEM_WRITE_IN $end
$var wire 1 L MUXDATAMEM_SELECT_IN $end
$var wire 32 z" OUT2_IN [31:0] $end
$var wire 5 {" RD_IN [4:0] $end
$var wire 1 i RESET $end
$var wire 1 p WRITE_ENABLE_IN $end
$var reg 32 |" ALU_OUT_OUT [31:0] $end
$var reg 3 }" FUNCT3_OUT [2:0] $end
$var reg 1 ~" MEM_READ_OUT $end
$var reg 1 !# MEM_WRITE_OUT $end
$var reg 1 "# MUXDATAMEM_SELECT_OUT $end
$var reg 32 ## OUT2_OUT [31:0] $end
$var reg 5 $# RD_OUT [4:0] $end
$var reg 1 %# WRITE_ENABLE_OUT $end
$upscope $end
$scope module datacache $end
$var wire 1 + CLK $end
$var wire 1 &# COMPARATORSIGNAL $end
$var wire 32 '# DATA_IN [31:0] $end
$var wire 1 (# DIRTY $end
$var wire 1 )# HITSIGNAL $end
$var wire 32 *# MEM_ADDRESS [31:0] $end
$var wire 1 @ MEM_BUSYWAIT $end
$var wire 1 F MEM_READ $end
$var wire 128 +# MEM_READ_OUT [127:0] $end
$var wire 1 J MEM_WRITE $end
$var wire 1 j RESET $end
$var wire 25 ,# TAG [24:0] $end
$var wire 1 -# VALID $end
$var reg 28 .# BLOCK_ADDR [27:0] $end
$var reg 1 /# BUSYWAIT $end
$var reg 32 0# CACHE_READ_OUT [31:0] $end
$var reg 128 1# DATA [127:0] $end
$var reg 1 2# MEM_READhit $end
$var reg 1 3# READ $end
$var reg 1 4# WRITE $end
$var reg 128 5# WRITE_OUT [127:0] $end
$var integer 32 6# i [31:0] $end
$var reg 3 7# index [2:0] $end
$var reg 2 8# next_state [1:0] $end
$var reg 2 9# offset [1:0] $end
$var reg 2 :# state [1:0] $end
$var reg 25 ;# tag [24:0] $end
$upscope $end
$scope module dmem $end
$var wire 28 <# ADDRESS [27:0] $end
$var wire 1 + CLOCK $end
$var wire 128 =# IN [127:0] $end
$var wire 1 A READ $end
$var wire 1 j RESET $end
$var wire 1 B WRITE $end
$var reg 1 ># BUSYWAIT $end
$var reg 128 ?# OUT [127:0] $end
$var reg 1 @# READACESS $end
$var reg 1 A# WRITEACESS $end
$var integer 32 B# i [31:0] $end
$upscope $end
$scope module datacorrecting $end
$var wire 32 C# DATA2 [31:0] $end
$var wire 3 D# FUNCTION3 [2:0] $end
$var wire 32 E# IN_DATAMEM [31:0] $end
$var wire 32 F# LB [31:0] $end
$var wire 32 G# LBU [31:0] $end
$var wire 32 H# LH [31:0] $end
$var wire 32 I# LHU [31:0] $end
$var wire 32 J# SB [31:0] $end
$var wire 32 K# SH [31:0] $end
$var reg 32 L# OUT [31:0] $end
$var reg 32 M# OUT_DATAMEM [31:0] $end
$upscope $end
$scope module reg4 $end
$var wire 32 N# ALU_OUT_IN [31:0] $end
$var wire 1 ( BUSYWAIT $end
$var wire 1 + CLK $end
$var wire 32 O# DATA_OUT_IN [31:0] $end
$var wire 1 M MUXDATAMEM_SELECT_IN $end
$var wire 5 P# RD_IN [4:0] $end
$var wire 1 i RESET $end
$var wire 1 q WRITE_ENABLE_IN $end
$var reg 32 Q# ALU_OUT_OUT [31:0] $end
$var reg 32 R# DATA_OUT_OUT [31:0] $end
$var reg 1 S# MUXDATAMEM_SELECT_OUT $end
$var reg 5 T# RD_OUT [4:0] $end
$var reg 1 U# WRITE_ENABLE_OUT $end
$upscope $end
$scope module Mux4 $end
$var wire 32 V# INPUT1 [31:0] $end
$var wire 32 W# INPUT2 [31:0] $end
$var wire 32 X# OUT [31:0] $end
$var wire 1 M SELECT $end
$upscope $end
$scope module Mux $end
$var wire 32 Y# INPUT1 [31:0] $end
$var wire 32 Z# INPUT2 [31:0] $end
$var wire 32 [# OUT [31:0] $end
$var wire 1 a SELECT $end
$upscope $end
$scope module pc $end
$var wire 1 ( BUSYWAIT $end
$var wire 1 + CLOCK $end
$var wire 32 \# PC [31:0] $end
$var wire 1 j RESET $end
$var reg 32 ]# NEXTPC [31:0] $end
$upscope $end
$scope module pcadder $end
$var wire 32 ^# IN1 [31:0] $end
$var wire 32 _# OUT [31:0] $end
$upscope $end
$scope module instructioncache $end
$var wire 32 `# address [31:0] $end
$var wire 1 + clock $end
$var wire 128 a# data_out [127:0] $end
$var wire 1 b# hit $end
$var wire 1 8 mem_busywait $end
$var wire 128 c# mem_readinst [127:0] $end
$var wire 1 j reset $end
$var wire 25 d# tag_out [24:0] $end
$var wire 1 e# tag_status $end
$var wire 1 f# valid_out $end
$var reg 1 g# busywait $end
$var integer 32 h# i [31:0] $end
$var reg 28 i# mem_address [27:0] $end
$var reg 1 j# mem_read $end
$var reg 2 k# next_state [1:0] $end
$var reg 32 l# readinst [31:0] $end
$var reg 2 m# state [1:0] $end
$upscope $end
$scope module instmem $end
$var wire 28 n# BLOCK_ADDRESS [27:0] $end
$var wire 1 + CLOCK $end
$var wire 1 9 READ $end
$var reg 1 o# BUSYWAIT $end
$var reg 1 p# READACCESS $end
$var reg 128 q# READ_INST [127:0] $end
$upscope $end
$scope module reg1 $end
$var wire 1 ( BUSYWAIT $end
$var wire 1 + CLK $end
$var wire 32 r# INSTRIN [31:0] $end
$var wire 32 s# NEXTPC [31:0] $end
$var wire 32 t# PC [31:0] $end
$var wire 1 i RESET $end
$var reg 32 u# INSTROUT [31:0] $end
$var reg 32 v# PCOUT [31:0] $end
$var reg 32 w# PCOUT_NEXT [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx w#
bx v#
bx u#
bx t#
bx s#
bx r#
bx q#
0p#
0o#
bx n#
b0 m#
bx l#
b0 k#
0j#
bx i#
b1000 h#
0g#
xf#
xe#
bx d#
bx c#
xb#
bx a#
bx `#
bx _#
bx ^#
bx ]#
bx \#
bx [#
b0 Z#
bx Y#
bx X#
bx W#
bx V#
xU#
bx T#
xS#
bx R#
bx Q#
bx P#
bx O#
bx N#
bx M#
bx L#
b0xxxxxxxxxxxxxxxx K#
b0xxxxxxxx J#
b0xxxxxxxxxxxxxxxx I#
bx H#
b0xxxxxxxx G#
bx F#
bx E#
bx D#
bx C#
b10000000000 B#
0A#
0@#
bx ?#
0>#
b0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx =#
b0xxxxxx <#
bx ;#
b0 :#
bx 9#
b0 8#
bx 7#
b1000 6#
b0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 5#
04#
03#
x2#
bx 1#
bx 0#
0/#
b0xxxxxx .#
x-#
bx ,#
bx +#
bx *#
x)#
x(#
bx '#
x&#
x%#
bx $#
bx ##
x"#
x!#
x~"
bx }"
bx |"
bx {"
bx z"
bx y"
bx x"
0w"
0v"
b0 u"
bx t"
b0 s"
xr"
xq"
xp"
xo"
xn"
xm"
bx l"
bx k"
bx j"
b0 i"
b0 h"
bx g"
bx f"
bx e"
bx d"
bz c"
bz b"
bx a"
bx `"
bx _"
bx ^"
bx ]"
bx \"
bx ["
bx Z"
bx Y"
bx X"
bx W"
bx V"
bx U"
bx T"
bx S"
bx R"
bx Q"
bx P"
bx O"
bx N"
bx M"
bx L"
xK"
bx J"
bx I"
bx H"
bx G"
bx F"
bx E"
xD"
xC"
xB"
xA"
x@"
x?"
x>"
bx ="
x<"
bx ;"
bx :"
bx 9"
bx 8"
bx 7"
bx 6"
bx 5"
bx 4"
bx 3"
bx 2"
bx 1"
bx 0"
bx /"
bx ."
bx -"
bx ,"
bx +"
x*"
x)"
x("
x'"
x&"
x%"
x$"
x#"
bx ""
x!"
bx ~
bx }
bx |
bx {
bx z
bx y
bx x
bx w
bx v
bx u
bx t
bx s
xr
xq
xp
xo
bx n
bx m
bx l
b0 k
1j
0i
bx h
bx g
bx f
bx e
bx d
bx c
bx b
0a
bx `
bx _
bx ^
bx ]
bx \
bx [
bx Z
bx Y
xX
xW
xV
xU
bx T
bx S
bx R
xQ
xP
bx O
xN
xM
xL
xK
xJ
xI
xH
bx G
xF
xE
bx D
xC
0B
0A
0@
b0xxxxxx ?
bx >
0=
z<
x;
x:
09
08
07
bx 6
bx 5
bx 4
bx 3
12
01
b0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 0
bx /
bx .
bx -
bx ,
0+
bx *
bx )
0(
x'
b0 &
x%
bx $
bx #
1"
0!
$end
#10
x<
0q"
0r"
0p"
b11111111111111111111111111111100 ]#
b11111111111111111111111111111100 ^
b11111111111111111111111111111100 ^#
b11111111111111111111111111111100 `#
b11111111111111111111111111111100 t#
b0x b"
b0x c"
#20
b11111111111111111111111111111100 v#
b11111111111111111111111111111100 _
b11111111111111111111111111111100 7"
0b#
b0 b
b0 [#
b0 \#
0f#
b0 c
b0 Y#
b0 _#
b0 s#
#30
b100000 w
1!
1+
#40
b11111111111111111111111111111100 G"
b11111111111111111111111111111100 `
b11111111111111111111111111111100 M"
b0 w#
b0 d
b0 8"
1(
1g#
17
b1 k#
b1000 6#
b0 ]#
b0 ^
b0 ^#
b0 `#
b0 t#
0"
0j
#50
b100 b
b100 [#
b100 \#
b100 c
b100 Y#
b100 _#
b100 s#
#60
b0 v#
b0 _
b0 7"
b100 w#
b100 d
b100 8"
0!
0+
#90
1p#
1o#
18
b0 i#
b0 >
b0 n#
1j#
19
b1 k#
b1 m#
1!
1+
#120
0!
0+
#150
1!
1+
#180
0!
0+
#210
1!
1+
#240
0!
0+
#270
1!
1+
#300
0!
0+
#330
1!
1+
#360
0!
0+
#390
1!
1+
#420
0!
0+
#450
1!
1+
#480
0!
0+
#510
1!
1+
#540
0!
0+
#550
bx10010011 q#
bx10010011 D
bx10010011 c#
#570
1!
1+
#600
0!
0+
#630
1!
1+
#660
0!
0+
#690
1!
1+
#720
0!
0+
#750
1!
1+
#780
0!
0+
#800
